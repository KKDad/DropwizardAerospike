plugins {
    id "org.sonarqube" version "2.7"
}

repositories {
    mavenCentral()
}

apply plugin: "java"
apply plugin: "jacoco"
apply plugin: "org.sonarqube"
apply plugin: "application"

ext {
    // Organized alphabetically - Please keep it that way!
    dropwizardVersion = '2.0.23'
    hamcrestVersion = '1.3'
    junitJupiterVersion = '5.5.1'
    log4jVersion = "2.14.1"
    mockitoVersion = '2.23.0'
    presidoVersion = "latest"
}

dependencies {
    implementation "io.dropwizard:dropwizard-core:$dropwizardVersion"
    implementation "io.dropwizard:dropwizard-auth:$dropwizardVersion"
    implementation 'io.jsonwebtoken:jjwt-api:0.11.2'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.2'

    // Uncomment the next line if you want to use RSASSA-PSS (PS256, PS384, PS512) algorithms:
    // runtimeOnly'org.bouncycastle:bcprov-jdk15on:1.60'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.2'

    runtime "org.apache.logging.log4j:log4j-core:$log4jVersion"

    // Use JUnit test framework
    testImplementation "org.junit.jupiter:junit-jupiter-api:$junitJupiterVersion"
    testImplementation "org.junit.jupiter:junit-jupiter-params:$junitJupiterVersion"

    testImplementation "org.mockito:mockito-core:$mockitoVersion"
    testImplementation "org.hamcrest:hamcrest-all:$hamcrestVersion"

    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junitJupiterVersion"
}

// Load our version number from the version.properties file.
def propFile = file('../version.properties')
if (propFile.canRead()) {
    Properties props = new Properties()
    props.load(new FileInputStream(propFile))
    if (props != null && props.containsKey('SEARCH_VERSION'))
        version = props['SEARCH_VERSION']
    else
        throw new GradleException('version.properties cannot be loaded or is missing key: SEARCH_VERSION')
} else {
    throw new GradleException('version.properties cannot be read')
}
logger.warn "Building version: " + version
group = 'com.ceridian.oauth'

sourceCompatibility = '1.11'
tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

tasks.withType(Test) {
    useJUnitPlatform()
}

test {
    finalizedBy jacocoTestReport
}
jacocoTestReport {
    dependsOn test
    reports {
        xml.enabled true
    }
}