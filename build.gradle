plugins {
    id 'com.github.johnrengelman.shadow' version '6.1.0'
    id 'com.coditory.integration-test' version '1.1.11'
    id "com.bmuschko.docker-remote-api" version "6.7.0"
}

repositories {
    jcenter()
    mavenCentral()
}

apply plugin: "java"
apply plugin: "application"
apply plugin: "com.coditory.integration-test"
apply plugin: "com.github.johnrengelman.shadow"
apply plugin: "com.bmuschko.docker-remote-api"

ext {
    // Organized alphabetically - Please keep it that way!
    aeroSpikeVersion = "ce-5.6.0.4"
    areoSpikeJdbcVersion = "1.2.0"
    dropwizardMetricsServletsVersion = '4.1.12'
    dropwizardSwaggerVersion = '2.0.12-1'
    dropwizardVersion = '2.0.12'
    gsonVersion = '2.8.6'
    hamcrestVersion = '1.3'
    junitJupiterVersion = '5.5.1'
    log4jVersion="2.13.3"
    mockitoVersion = '2.23.0'
}

dependencies {
    implementation "io.dropwizard:dropwizard-core:$dropwizardVersion"
    implementation "io.dropwizard:dropwizard-jdbi3:$dropwizardVersion"
    implementation "com.aerospike:aerospike-jdbc:$areoSpikeJdbcVersion"

    runtime 'org.apache.logging.log4j:log4j-core:2.14.1'

    testImplementation "io.dropwizard:dropwizard-testing:$dropwizardVersion"
    testImplementation "com.google.code.gson:gson:$gsonVersion"

    // Use JUnit test framework
    testImplementation "org.junit.jupiter:junit-jupiter-api:$junitJupiterVersion"
    testImplementation "org.junit.jupiter:junit-jupiter-params:$junitJupiterVersion"

    testImplementation "org.mockito:mockito-core:$mockitoVersion"
    testImplementation "org.hamcrest:hamcrest-all:$hamcrestVersion"

    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junitJupiterVersion"
}

// Load our version number from the version.properties file.
def propFile = file('./version.properties')
if (propFile.canRead()){
    Properties props = new Properties()
    props.load(new FileInputStream(propFile))
    if (props!=null && props.containsKey('SEARCH_VERSION'))
        version = props['SEARCH_VERSION']
    else
        throw new GradleException('version.properties cannot be loaded or is missing key: SEARCH_VERSION')
} else {
    throw new GradleException('version.properties cannot be read')
}
logger.warn "Building version: " + version
group = 'com.ceridian.search'

sourceCompatibility = '1.13'
tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

tasks.withType(Test) {
    useJUnitPlatform()
}

/**************************************************************************************************************
                Testing Helpers - Start/Stop Areospike when running integration tests
/**************************************************************************************************************/
import com.bmuschko.gradle.docker.tasks.container.DockerCreateContainer
import com.bmuschko.gradle.docker.tasks.container.DockerStartContainer
import com.bmuschko.gradle.docker.tasks.container.DockerStopContainer
import com.bmuschko.gradle.docker.tasks.image.DockerPullImage


// Return true if AeroSpike is running on the localhost:3000 and is in  a green state
static boolean get_areospike_status() {
    ServerSocket ss = null;
    DatagramSocket ds = null;
    try {
        ss = new ServerSocket(3000);
        ss.setReuseAddress(true);
        ds = new DatagramSocket(3000);
        ds.setReuseAddress(true);
        return true;
    } catch (IOException ignored) {
    } finally {
        if (ds != null) {
            ds.close();
        }
        if (ss != null) {
            try {
                ss.close();
            } catch (IOException ignored) {
                /* should not be thrown */
            }
        }
    }
    return false;
}


task pullImageAeroSpike(type: DockerPullImage) {
    image = "aerospike:$aeroSpikeVersion"
}

task createContainer(type: DockerCreateContainer) {
    dependsOn pullImageAeroSpike
    targetImageId "aerospike:$aeroSpikeVersion"
    containerName = "aerospike"
    hostConfig.portBindings  = ["3000:3000", "3001:3001", "3002:3002" ]
    hostConfig.autoRemove = true
    withEnvVar("NAMESPACE", "test")
}

task start_aerospike(type: DockerStartContainer) {
    dependsOn createContainer
    targetContainerId createContainer.getContainerId()
}

task wait_aerospike_startup {
    dependsOn start_aerospike
    doLast {
        timeout.set(Duration.ofMinutes(3))
        logger.info("Waiting for AeroSpike instance on localhost:3000")
        while (!get_es_status())
            sleep(5 * 1000)
    }
}

task stop_aerospike(type: DockerStopContainer) {
    targetContainerId createContainer.getContainerId()
}

task check_if_aerospike_running {
    def is_aerospike_present = get_areospike_status()
    if (is_aerospike_present) {
        logger.info("Using existing AeroSpike instance running on localhost:3000")
    } else {
        integrationTest.dependsOn wait_aerospike_startup
        integrationTest.finalizedBy stop_aerospike
    }
}
integrationTest.dependsOn check_if_aerospike_running



/**************************************************************************************************************
     Produce a FatJar for Testing and Deployment purposes
/**************************************************************************************************************/
import java.time.ZoneId
import java.time.ZonedDateTime
import java.time.format.DateTimeFormatter

mainClassName = 'com.ceridian.search.main.SearchAnonymizerAPI'
shadowJar {
    mergeServiceFiles()
    exclude 'META-INF/*.DSA', 'META-INF/*.RSA', 'META-INF/*.SF'
    manifest {
        attributes 'Implementation-Title': rootProject.name
        attributes 'Implementation-Version': rootProject.version
        attributes 'Implementation-Vendor-Id': rootProject.group
        attributes 'Build-Time': ZonedDateTime.now(ZoneId.of("UTC")).format(DateTimeFormatter.ISO_ZONED_DATE_TIME)
        attributes 'Built-By': InetAddress.localHost.hostName
        attributes 'Created-By': 'Gradle ' + gradle.gradleVersion
        attributes 'Main-Class': mainClassName
    }
}

runShadow {
    args = ['server', "${project.rootDir}/config.yml"]
}
